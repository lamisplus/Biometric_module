<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.5.xsd">

    <property name="autoIncrement" value="true"/>

    <changeSet id="20220306-0006" author="amos-data-fi">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="biometric"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE biometric
            (
                id                 VARCHAR(255) NOT NULL,
                created_date       TIMESTAMP WITHOUT TIME ZONE,
                created_by         VARCHAR(255),
                last_modified_date TIMESTAMP WITHOUT TIME ZONE,
                last_modified_by   VARCHAR(255),
                facility_id        BIGINT,
                person_uuid        VARCHAR(255)       NOT NULL,
                template           BYTEA  NOT  NULL ,
                biometric_type     VARCHAR(255),
                template_type      VARCHAR(255),
                enrollment_date    date,
                archived           INTEGER,
                iso                BOOLEAN,
                extra              JSONB,
                device_name        VARCHAR(255),
                reason              VARCHAR(255),
                version_iso_20     BOOLEAN,
                CONSTRAINT pk_biometric PRIMARY KEY (id),
                CONSTRAINT person_uuid_fk FOREIGN KEY (person_uuid)
                    REFERENCES public.patient_person (uuid) MATCH SIMPLE
                    ON UPDATE NO ACTION
                    ON DELETE RESTRICT
                    NOT VALID
            );
        </sql>
    </changeSet>
    <changeSet id="20220706-007" author="amos-data-fi">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="biometric_device"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE "biometric_device"
            (
                id bigint NOT NULL GENERATED ALWAYS AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
                name   VARCHAR(255),
                url    VARCHAR(255),
                port   VARCHAR(255),
                type    VARCHAR(255),
                active BOOLEAN,
                CONSTRAINT "pk_biometric-device" PRIMARY KEY (id)
            );
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Emeka Ilozue" id="20221406-0001">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*) FROM biometric_device WHERE name='SG_DEV_AUTO';
            </sqlCheck>
        </preConditions>
        <sql>
            INSERT INTO biometric_device(name, url, type, active)VALUES ('SG_DEV_AUTO', 'http://localhost:port/api/v1/biometrics/enrollment', 'Secugen', 'true');
            INSERT INTO biometric_device(name, url, type, active)VALUES ('Futronic FS80H %231', 'http://localhost:port/api/v1/biometrics/enrollment', 'Futronic', 'false');
        </sql>
    </changeSet>


    <changeSet failOnError="false" author="Dr Java" id="biometrics-0001">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*)
                FROM pg_attribute
                WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'biometric')
                  AND attname = 'image_quality';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE IF EXISTS biometric ADD COLUMN image_quality integer;
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Dr Java" id="biometrics-0002">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*)
                FROM pg_attribute
                WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'biometric')
                  AND attname = 'recapture';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE IF EXISTS biometric ADD COLUMN recapture integer;
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Dr Java" id="biometrics-0003">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*)
                FROM pg_attribute
                WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'biometric')
                  AND attname = 'recapture_message';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE IF EXISTS biometric ADD COLUMN recapture_message character varying;
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Dr Java" id="biometrics-0004">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT CASE WHEN pg_typeof(recapture)::character varying = 'character varying' THEN 1 ELSE 0 END
                FROM biometric LIMIT 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE biometric ALTER COLUMN recapture TYPE character varying;
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Dr Java" id="biometrics-0005">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT CASE WHEN pg_typeof(recapture)::character varying = 'character varying' THEN 1 ELSE 0 END
                FROM biometric LIMIT 1;
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE biometric ALTER COLUMN recapture TYPE INTEGER  USING (CAST(recapture AS integer));
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Dr Java" id="biometrics-0006">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*)
                FROM pg_attribute
                WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'biometric') AND attname = 'hashed';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE IF EXISTS biometric ADD COLUMN hashed character varying;
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Dr Java" id="biometrics-0007">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*)
                FROM pg_attribute
                WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'biometric') AND attname = 'count';
            </sqlCheck>
        </preConditions>
        <sql>
            ALTER TABLE IF EXISTS biometric ADD COLUMN count integer;
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Dr Java" id="biometrics-00008">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(t.*) FROM (SELECT person_uuid FROM biometric
                                        WHERE recapture IS NULL AND archived=0 LIMIT 1) t
            </sqlCheck>
        </preConditions>
        <sql>
            UPDATE biometric SET recapture=0;
        </sql>
    </changeSet>

    <!--<changeSet failOnError="false" author="Dr Java" id="biometrics-0009">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(*)
                FROM biometric
                WHERE count IS NULL LIMIT 1;
            </sqlCheck>
        </preConditions>
        <sql>
            UPDATE biometric SET count=(SELECT COUNT(person_uuid) FROM biometric WHERE archived=0
                                                                                 GROUP BY person_uuid)
        </sql>
    </changeSet>-->

    <changeSet failOnError="false" author="Dr Java" id="biometrics-0010">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="1">
                SELECT COUNT(t.*) FROM (SELECT person_uuid FROM biometric
                                        WHERE count IS NULL AND archived=0 LIMIT 1) t
            </sqlCheck>
        </preConditions>
        <sql>
            UPDATE biometric b SET count=t.count
                FROM (SELECT person_uuid, COUNT(person_uuid) FROM biometric WHERE archived=0 GROUP BY person_uuid) t
            WHERE b.archived=0 AND b.person_uuid=t.person_uuid;
        </sql>
    </changeSet>

    <changeSet failOnError="true" author="Dr Java" id="biometrics-0011">
        <preConditions onFail="MARK_RAN">
            <sqlCheck expectedResult="0">
                SELECT COUNT(*)
                FROM pg_attribute
                WHERE attrelid = (SELECT oid FROM pg_class WHERE relname = 'deduplication');
            </sqlCheck>
        </preConditions>
        <sql>
            CREATE TABLE IF NOT EXISTS public.deduplication
            (
                id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
                deduplication_date date NOT NULL,
                matched_count integer NOT NULL,
                unmatched_count integer NOT NULL,
                details jsonb,
                person_uuid character varying COLLATE pg_catalog."default" NOT NULL,
                baseline_finger_count integer NOT NULL,
                recapture_finger_count integer NOT NULL,
                perfect_match_count integer NOT NULL,
                imperfect_match_count integer NOT NULL
                )
        </sql>
    </changeSet>
    <changeSet failOnError="false" author="Amos data-fi" id="biometrics-0012" >
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="biomettric_pims_tracker"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE  IF NOT EXISTS biomettric_pims_tracker
            (
                id                 VARCHAR(255) NOT NULL,
                created_date       TIMESTAMP WITHOUT TIME ZONE,
                created_by         VARCHAR(255),
                last_modified_date TIMESTAMP WITHOUT TIME ZONE,
                last_modified_by   VARCHAR(255),
                facility_id        BIGINT,
                person_uuid        VARCHAR(255),
                pims_patient_id    VARCHAR(255),
                verification_date  date         NOT NULL,
                verification       BOOLEAN,
                data               JSONB,
                archived           INTEGER,
                CONSTRAINT pk_biomettric_pims_tracker PRIMARY KEY (id)
                );

        </sql>
    </changeSet>
    <changeSet failOnError="false" author="Amos data-fi" id="biometrics-0013">
        <preConditions onFail="MARK_RAN">
            <not>
                <tableExists tableName="biometric_pims_config"/>
            </not>
        </preConditions>
        <sql>
            CREATE TABLE IF NOT EXISTS biometric_pims_config
            (
                id                 BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
                created_date       TIMESTAMP WITHOUT TIME ZONE,
                created_by         VARCHAR(255),
                last_modified_date TIMESTAMP WITHOUT TIME ZONE,
                last_modified_by   VARCHAR(255),
                facility_id        BIGINT,
                username           VARCHAR(255),
                password           VARCHAR(255),
                url                VARCHAR(255),
                archived           INTEGER,
                CONSTRAINT pk_biometric_pims_config PRIMARY KEY (id)
                );
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Joshua Gabriel" id="biometrics-0014">
        <preConditions onFail="MARK_RAN">
            <not>
                <columnExists tableName="biometric" columnName="replace_date" />
            </not>
        </preConditions>
        <sql>
            ALTER TABLE biometric ADD COLUMN replace_date DATE;
        </sql>
    </changeSet>

    <changeSet failOnError="false" author="Joshua Gabriel" id="biometrics-0015">
        <preConditions onFail="MARK_RAN">
            <not>
                <columnExists tableName="biometric" columnName="match_type" />
                <columnExists tableName="biometric" columnName="match_biometric_id" />
                <columnExists tableName="biometric" columnName="match_person_uuid" />
            </not>
        </preConditions>
        <sql>
            ALTER TABLE biometric ADD COLUMN match_type varchar(255);
            ALTER TABLE biometric ADD COLUMN match_biometric_id varchar(255);
            ALTER TABLE biometric ADD COLUMN match_person_uuid varchar(255);
        </sql>
    </changeSet>

</databaseChangeLog>
